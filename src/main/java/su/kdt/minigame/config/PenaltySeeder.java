package su.kdt.minigame.config;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import su.kdt.minigame.domain.Penalty;
import su.kdt.minigame.repository.PenaltyRepository;

/**
 * Î©±Îì±Ìïú Í∏∞Î≥∏ Î≤åÏπô ÏãúÎìú 
 * data.sql ÎåÄÏã† slug Í∏∞Î∞òÏúºÎ°ú Ï§ëÎ≥µ ÏóÜÏù¥ Í∏∞Î≥∏ Î≤åÏπô ÏÉùÏÑ±
 */
@Slf4j
@Component
@Order(1000) // Flyway ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïù¥ÌõÑ Ïã§Ìñâ
@RequiredArgsConstructor
public class PenaltySeeder implements CommandLineRunner {

    private final PenaltyRepository penaltyRepository;

    // Í∏∞Î≥∏ Î≤åÏπô Ï†ïÏùò (slug ‚Üí text Îß§Ìïë)
    private static final String[][] DEFAULT_PENALTIES = {
        {"buy-coffee", "Ïª§Ìîº Ìïú Ïûî ÏÇ¨Í∏∞"},
        {"buy-ice-cream", "ÏïÑÏù¥Ïä§ÌÅ¨Î¶º ÏÇ¨Í∏∞"},
        {"buy-chicken", "ÏπòÌÇ® Ìïú ÎßàÎ¶¨ ÏÇ¨Í∏∞"},
        {"sing-song", "ÎÖ∏Îûò Ìïú Í≥° Î∂ÄÎ•¥Í∏∞"},
        {"dance-song", "ÎåÑÏä§ Ìïú Í≥° Ï∂îÍ∏∞"}
    };

    @Override
    public void run(String... args) throws Exception {
        log.info("üéØ Starting idempotent penalty seeding...");
        
        // 1Îã®Í≥Ñ: ÏûòÎ™ªÎêú Î≤åÏπôÎì§ Ï†ïÎ¶¨ (Îπà slugÎÇò null slug)
        cleanupInvalidPenalties();
        
        // 2Îã®Í≥Ñ: Ï§ëÎ≥µÎêú Í∏∞Î≥∏ Î≤åÏπôÎì§ Ï†ïÎ¶¨
        cleanupDuplicatePenalties();
        
        // 3Îã®Í≥Ñ: ÎàÑÎùΩÎêú Í∏∞Î≥∏ Î≤åÏπôÎì§ Ï∂îÍ∞Ä
        int created = 0;
        int skipped = 0;
        
        for (String[] penaltyData : DEFAULT_PENALTIES) {
            String slug = penaltyData[0];
            String text = penaltyData[1];
            
            // slug Í∏∞Î∞òÏúºÎ°ú Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (Î©±Îì±)
            var existingPenalties = penaltyRepository.findBySlug(slug);
            if (existingPenalties.isEmpty()) {
                Penalty penalty = new Penalty(slug, text, "system");
                penaltyRepository.save(penalty);
                log.debug("‚úÖ Created penalty: {} ‚Üí {}", slug, text);
                created++;
            } else {
                log.debug("‚è≠Ô∏è  Skipped existing penalty: {}", slug);
                skipped++;
            }
        }
        
        long totalPenalties = penaltyRepository.count();
        log.info("üèÅ Penalty seeding completed: {} created, {} skipped, {} total penalties in DB", 
                created, skipped, totalPenalties);
    }
    
    private void cleanupInvalidPenalties() {
        log.debug("üßπ Cleaning up invalid penalties (empty or null slug)...");
        var invalidPenalties = penaltyRepository.findAll().stream()
            .filter(p -> p.getSlug() == null || p.getSlug().trim().isEmpty())
            .toList();
            
        if (!invalidPenalties.isEmpty()) {
            penaltyRepository.deleteAll(invalidPenalties);
            log.info("üóëÔ∏è  Deleted {} invalid penalties with empty/null slug", invalidPenalties.size());
        }
    }
    
    private void cleanupDuplicatePenalties() {
        log.debug("üîç Checking for duplicate penalties...");
        
        for (String[] penaltyData : DEFAULT_PENALTIES) {
            String slug = penaltyData[0];
            var existingPenalty = penaltyRepository.findBySlug(slug);
            
            if (existingPenalty.isPresent()) {
                log.debug("‚úÖ Penalty with slug '{}' already exists", slug);
            } else {
                log.debug("‚ÑπÔ∏è  No duplicate found for slug: {}", slug);
            }
        }
    }
}